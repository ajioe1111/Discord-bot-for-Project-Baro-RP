import Discord from 'discord.js';
import { SlashCommandBuilder } from '@discordjs/builders';
import { MessageActionRow, MessageButton, MessageEmbed } from 'discord.js';
import { client, owner } from '../bot.js';
import fs from 'fs';
import { xpAdd } from '../events/messageCreate.js';
const promisify = f => (...args) => new Promise((a, b) => f(...args, (err, res) => err ? b(err) : a(res)));
const wait = ms => new Promise(resolve => setTimeout(resolve, ms));
const cooldown = new Set();
const databasePath = './db/list.json';
const database = JSON.parse(fs.readFileSync(databasePath));

export default {
    data: new SlashCommandBuilder()
        .setName('casino')
        .setDescription('–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –Ω–∞ –æ–ø—ã—Ç. –ü–∞—É–∑–∞ 5 —á–∞—Å–æ–≤.'),
    /**
     * 
     * @param {Discord.Interaction} interaction 
     */
    async execute(interaction) {
        if (cooldown.has(interaction.member.id)) { return await interaction.reply({ content: '–ü—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å!', ephemeral: true }); }
        cooldown.add(interaction.member.id);
        setTimeout(() => { cooldown.delete(interaction.member.id) }, 18000000)
        const userIndex = database.users_list.findIndex(user => user.id === interaction.member.id);
        if (userIndex === -1) { return; };
        if (database.users_list[userIndex].properties.xp < 500) { return interaction.reply({ content: '–î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –Ω–µ –º–µ–Ω–µ–µ 500 –æ–ø—ã—Ç–∞.', ephemeral: true }); };
        const casinoYes = new MessageActionRow()
            .addComponents(
                new MessageButton()
                    .setCustomId('casino_yes')
                    .setLabel('–ò–≥—Ä–∞—Ç—å!')
                    .setStyle('SUCCESS'),
            );
        const casinoNo = new MessageActionRow()
            .addComponents(
                new MessageButton()
                    .setCustomId('casino_no')
                    .setLabel('–Ø –ø–∞—Å...')
                    .setStyle('DANGER'),
            );
        await interaction.reply({ ephemeral: true, content: '–í–Ω–µ—Å—Ç–∏ 500 –æ–ø—ã—Ç–∞ –¥–ª—è –∏–≥—Ä—ã?', components: [casinoYes, casinoNo] });
        await wait(20000);
        await interaction.editReply({ content: '–í—Ä–µ–º—è –≤—ã—à–ª–æ!', components: [] });
    }
}

/**
 * 
 * @param {Discord.Interaction} interaction 
 */
export async function casinoGame(interaction) {
    const userIndex = database.users_list.findIndex(user => user.id === interaction.member.id);
    const randomNum1 = Math.floor(Math.random() * 10);
    const randomNum2 = Math.floor(Math.random() * 10);
    const randomNum3 = Math.floor(Math.random() * 10);
    await wait(1000);
    await interaction.editReply({ content: '–í—ã –∫—Ä—É—Ç–∏—Ç–µ –±–∞—Ä–∞–±–∞–Ω...' });
    await wait(3000);
    await interaction.editReply({ content: `–ò –≤—ã–ø–∞–¥–∞—é—Ç —á–∏—Å–ª–∞ **${randomNum1}**` });
    await wait(1500);
    await interaction.editReply({ content: `–ò –≤—ã–ø–∞–¥–∞—é—Ç —á–∏—Å–ª–∞ **${randomNum1}** **${randomNum2}**` });
    await wait(1500);
    await interaction.editReply({ content: `–ò –≤—ã–ø–∞–¥–∞—é—Ç —á–∏—Å–ª–∞ **${randomNum1}** **${randomNum2}** **${randomNum3}**` });
    await wait(1000);
    if (randomNum1 == randomNum2 && randomNum1 == randomNum3) {
        await interaction.editReply({ content: '–î–∂–µ–∫–ø–æ—Ç! 4000 –∫ –æ–ø—ã—Ç—É!' });
        xpAdd(4000, interaction.user.id, interaction.channel);
        return interaction.channel.send(`${interaction.member} —Å–æ—Ä–≤–∞–ª –î–∂–µ–∫–ø–æ—Ç! üéâüéâüéâ`);
    }
    if (randomNum1 == randomNum2 || randomNum1 == randomNum3 || randomNum2 == randomNum3) {
        await interaction.editReply({ content: '–î–≤–∞ –∏–∑ —Ç—Ä–µ—Ö! 1000 –∫ –æ–ø—ã—Ç—É!' });
        xpAdd(1000, interaction.user.id, interaction.channel);
        return interaction.channel.send(`${interaction.member} –≤—ã–±–∏–ª –¥–≤–∞ –∏–∑ —Ç—Ä–µ—Ö –≤ –∫–∞–∑–∏–Ω–æ! üé∞`);
    } else {
        await interaction.editReply({ content: '–ù–µ –ø–æ–≤–µ–∑–ª–æ üòù' });
        database.users_list[userIndex].properties.xp = database.users_list[userIndex].properties.xp - 500;
        fs.writeFileSync(databasePath, JSON.stringify(database));
        return interaction.channel.send(`${interaction.member} –ü—Ä–æ–∏–≥—Ä–∞–ª —Å–≤–æ–∏ –∫—Ä–æ–≤–Ω—ã–µ –≤ –∫–∞–∑–∏–Ω–æ! ü§¨`);
    }
}